A _service_ requires a MySQL database. If you have not yet configured *makeUp* for the usage of a database, you should read the chapter _Connecting the database_ first.

Create a service with the CLI
----------------------------

1. From within the root directory of your project use the CLI to create a service: + 
+ 
[source,groovy]
----
$ php makeup/cli.phar --create-service YourService
----

1. Check the info in the terminal.

Using a service
---------------

With a _service_ you can access and manipulate data in a MySQL database in an easy manner. Before you can use the _service_, you have to create a table in the database and provide the _service_ some infos about this table.

1. Open `makeup/services/your_service.php` and change it accordingly: + 
+ 
[source,groovy]
----
parent::__construct([
    "table" => "sampledata",
    "uniqueID" => "uid",
    "columns" => "name, age, city, country"
]);
----

1. in the controller of the module, where you want the service to be available, inject it like this: + 
+ 
[source,groovy]
----
/**
 * @Inject("makeup\services\YourService")
 * @var
 */
private $YourService;
----

CRUD functions
--------------

*Read a collection*

1. Before iterating through a recordset, the data must have been read. + 
+ 
[source,groovy]
----
$this->YourService->read(); 
----
1. Now iterate using the `next()` method. + 
+ 
[source,groovy]
----
while ($Item = $this->YourService->next()) {
    $name = $Item->getProperty("name"); // With getProperty() you get the value of a specific item.
    $age = $Item->getProperty("age");
    .....
}
----

*Read a single item*

- The `getByUniqueId()` method returns a specific record as an object. It expects the value of the unique column as parameter: + 
+ 
[source,groovy]
----
$item = $this->YourService->getByUniqueId(3); 
----

- The `getByKey()` method returns a specific record as an object. It expects a column as the first parameter and a value as the second. If the given key isnÂ´t unique and more than one record is in the set, only the first one will be returned: + 
+ 
[source,groovy]
----
$item = $this->YourService->getByKey("age", 27); 
----

*Create a new item*

- You add a new item to the collection and store it in the database with the `create()` method. The methode expects an array, which values match the order of the columns as configured and do NOT include the unique id: + 
+ 
[source,groovy]
----
$Item = $this->YourService->create(["Kimberly McGrath", 19, "Dublin", "Ireland"]); 
----

*Update an existing item*

- You modify properties of an item with the setProperty() methode. To store those modifications permanently in the database use `update()`: + 
+ 
[source,groovy]
----
$Item = $this->YourService->getByUniqueId(4);
$Item->setProperty("city", "Marsailles");  // With `setProperty()` you modify the value of a specific item.
$Item->setProperty("country", "France");
$Item->update(); 
----

*Delete an item*

- You delete an item with the `delete()` methode: + 
+ 
[source,groovy]
----
$Item = $this->YourService->getByKey("uid", 5);
$Item->delete(); 
----

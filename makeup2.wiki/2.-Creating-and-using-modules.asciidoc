Create a module with the CLI
----------------------------

1. From within the root directory of your project use the CLI to create a module: + 
+ 
[source,groovy]
----
$ php makeup/cli.phar --create-module YourModule
----

3. Check the info in the terminal. All files and folders must have been successfully created.

Components of a module
----------------------

A module at least consists of an INI configuration file, an HTML template and a PHP controller. Usually additional files (e.g. JavaScripts, CSS files, Images, etc.) are needed for output in the frontend. These files are stored in the res folder.

Using a module
--------------

If you look in the app folder and its controller file, you will notice that the app itself is just a module. In fact, every module has the power to behave like a standalone application, with a completely independent template. But for the most purposes it's best if the app is the main module with the basic template.

It is possible to use a module in two different ways: 

1. *Standalone* + 
A standalone module runs in the browser by adding `?mod=your_module&nowrap` to the URL. The `nowrap` parameter avoids the modules template being displayed as a subset of the app. + 
+ 
If you would add a new item to the navigation and add `?mod=your_module` to the href parameter, your module would be nothing else than a new page.

2. *As an extension* + 
You can extend modules with as many other modules as you like. Just instantiate an extending module inside the `build()` method of the current module and render it: + 
+ 
[source,groovy]
----
$YourModule = Module::create("your_module");
$html = $YourModule->render();
----
+ 
Usually you would assign the rendered result to a marker in the template. Read about this in the section _Templates, Markers & Slices_.

Tasks
-----

In addition to the rendering of HTML with the `build()` method, other functions can be settled with modules as well. These additional methods are called *tasks*. A task is perfect to request asynchronous data from a specific module in the web browser.

[source,groovy]
----
public function build()
{...}

/**
 * This is an additional task.
 */
public function yourTask()
{
    $data = ["When was", "the last time", "you looked at", "the starry sky?"];
    return json_encode($data);
}
----

Tasks can be executed in two different ways: 

1. *In the front-end* + 
A task will be executed in the browser by adding `?mod=your_module&task=yourTask` to the URL. What ever a task will return (e.g. JSON), it wonÂ´t be wrapped in the apps template.

2. *In the back-end* + 
Just instantiate your module in another module and call the method of the task: + 
+ 
[source,groovy]
----
$YourModule = Module::create("your_module");
$result = $YourModule->yourTask();
----